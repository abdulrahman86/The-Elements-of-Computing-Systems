CHIP Memory {
  IN  in[16], load, address[15];
  OUT out[16];

  PARTS:
  // selectRam = (0 <= address <= 0x3FFF)
  // selectIo  = (0x4000 <= address <= 0xFFFF)
  DMux(in=true, sel=address[14], a=selectRam, b=selectIo);
  // selectScreen = (0x4000 <= x <= 0x5FFF)
  // selectKeyboard = (0x6000 <= x <= 0xFFFF)
  // Note that though access to (address > 0x6000) is invalid, behaviour in such a case is not
  // stated by specification. If a read to such an address is attempted, I provide the keyboard's
  // output; if a write is attempted (load=1), nothing is written anywhere.
  DMux(in=selectIo, sel=address[13], a=selectScreen, b=selectKeyboard);

  And(a=load, b=selectRam, out=loadRam);
  And(a=load, b=selectScreen, out=loadScreen);

  RAM16K(address=address[0..13], in=in, load=loadRam, out=ramOut);
  Keyboard(out=keyboardOut);
  Screen(address=address[0..12], in=in, load=loadScreen, out=screenOut);

  Mux16(a=screenOut, b=keyboardOut, sel=selectKeyboard, out=ioOut);
  Mux16(a=ramOut, b=ioOut, sel=selectIo, out=out);
}
